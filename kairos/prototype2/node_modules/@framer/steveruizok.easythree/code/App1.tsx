import { Override, serverURL } from 'framer'
import * as THREE from 'three'
import * as GLTFLoader from 'three-gltf-loader'

const loader = new GLTFLoader()
const light = new THREE.DirectionalLight('#FF0000', 1)

light.position.set(1, 10, 1)

export const BasicOverride: Override = (props) => {
	return {
		start: (props, { scene, camera, mouse, raycaster }) => {
			// Called once when component mounts
			// Add lights, objects, etc
		},
		update: (props, { scene, camera, mouse, raycaster }) => {
			// Called each animation frame (60FPS)
			// Handle animations, interactions, etc
		},
		onClick: (props, { scene, camera, mouse, raycaster }) => {},
		onMouseMove: (props, { scene, camera, mouse, raycaster }) => {},
		onMouseEnter: (props, { scene, camera, mouse, raycaster }) => {},
		onMouseLeave: (props, { scene, camera, mouse, raycaster }) => {},
	}
}

export const SceneOverride: Override = (props) => {
	return {
		start: (props, { scene, camera, mouse, raycaster }) => {
			scene.add(light)
			const url = serverURL() + 'models/cat/scene.gltf'

			loader.load(url, (gltf) => {
				scene.add(gltf.scene)
			})
		},
		update: (props, { scene, camera, mouse, raycaster }) => {
			scene.rotation.y += 0.01
			light.rotation.y -= 0.01
		},
		onClick: (props, { scene, camera, mouse, raycaster }) => {},
		onMouseMove: (props, { scene, camera, mouse, raycaster }) => {},
		onMouseEnter: (props, { scene, camera, mouse, raycaster }) => {},
		onMouseLeave: (props, { scene, camera, mouse, raycaster }) => {},
	}
}
